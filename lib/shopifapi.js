// Generated by CoffeeScript 1.4.0
(function() {
  var Log, Queue, Shopifapi, async, req;

  Queue = require('burst-queue');

  async = require('async');

  req = require('request');

  Log = require('./log');

  Shopifapi = (function() {
    var _auth, _buildOptions, _log, _queue, _url;

    _auth = {
      username: '',
      password: '',
      base64: ''
    };

    _url = '';

    _log = null;

    _queue = null;

    _buildOptions = function(url, method, data) {
      var options;
      options = {
        url: url,
        method: method,
        json: true,
        headers: {
          "Authorization": _auth.base64
        }
      };
      if (data != null) {
        options.body = JSON.stringify(data);
      }
      return options;
    };

    function Shopifapi(options) {
      var verbose;
      _auth = options.auth;
      _auth.base64 = "Basic " + ((new Buffer([_auth.username, _auth.password].join(':'))).toString('base64'));
      _url = options.url;
      verbose = options.verbose != null ? options.verbose : false;
      _log = new Log(verbose, options.logger);
      _queue = new Queue(5 * 60 * 1000, 250);
    }

    Shopifapi.prototype.getBaseObj = function(obj, args, callback) {
      var argswa, argswq, countComplete, countUrl, getData,
        _this = this;
      argswq = '';
      argswa = '';
      if (args) {
        argswq = '?' + args;
        argswa = '&' + args;
      }
      countUrl = "" + _url + "/admin/" + obj + "/count.json" + argswq;
      countComplete = function(err, response, result) {
        var currPage, objects, pages, q, qtask, _i, _results;
        pages = Math.ceil(result.count / 250);
        objects = [];
        qtask = function(task, callback) {
          var fetch, options;
          fetch = "" + _url + "/admin/" + obj + ".json?limit=250&page=" + task.page + argswa;
          options = _buildOptions(fetch, 'GET');
          return _queue.add(function() {
            var request;
            _log.may(fetch);
            return request = req(options, function(err, response, result) {
              if (err != null) {
                _log.may(err);
              }
              if (response.statusCode === 500) {
                _log.may("ERROR 500. Retrying...");
                return this.retry(0);
              } else {
                objects = objects.concat(result[obj]);
                if (callback != null) {
                  return callback(objects);
                }
              }
            });
          });
        };
        q = async.queue(qtask, 5);
        q.drain = function() {
          if (callback != null) {
            return callback(objects);
          }
        };
        _results = [];
        for (currPage = _i = 1; 1 <= pages ? _i <= pages : _i >= pages; currPage = 1 <= pages ? ++_i : --_i) {
          _results.push(q.push({
            page: currPage
          }));
        }
        return _results;
      };
      getData = function() {
        var options;
        _log.may(countUrl);
        options = {
          url: countUrl,
          method: 'GET',
          json: true,
          headers: {
            "Authorization": _auth.base64
          }
        };
        _log.may(options);
        return req(options, countComplete);
      };
      return _queue.add(getData);
    };

    Shopifapi.prototype.getSubObj = function(obj, subobj, args, callback) {
      var fetch, options;
      fetch = "" + _url + "/admin/" + obj + "/" + args + "/" + subobj + ".json";
      options = _buildOptions(fetch, 'GET');
      return _queue.add(function() {
        var request;
        _log.may(fetch);
        return request = req(options, function(err, response, result) {
          if (response.statusCode === 500) {
            _log.may("ERROR 500. Retrying...");
            return this.retry(0);
          } else {
            if (callback != null) {
              return callback(result[subobj]);
            }
          }
        });
      });
    };

    Shopifapi.prototype.put = function(obj, id, data, callback) {
      var options, put;
      put = "" + _url + "/admin/" + obj + "/" + id + ".json";
      options = _buildOptions(put, 'PUT', data);
      return _queue.add(function() {
        var request;
        _log.may("PUT " + put);
        _log.may(data);
        return request = req(options, function(err, response, result) {
          if (err != null) {
            _log.may(err);
          }
          if (result != null) {
            _log.may(result);
          }
          if (callback != null) {
            return callback(result != null ? result[obj] : null);
          }
        });
      });
    };

    Shopifapi.prototype.post = function(obj, data, callback) {
      var options, post;
      post = "" + _url + "/admin/" + obj + ".json";
      options = _buildOptions(post, 'POST', data);
      return _queue.add(function() {
        var request;
        _log.may("POST " + post);
        _log.may(data);
        return request = req(options, function(err, response, result) {
          if (err != null) {
            _log.may(err);
          }
          if (result != null) {
            _log.may(result);
          }
          if (callback != null) {
            return callback(result != null ? result[obj] : null);
          }
        });
      });
    };

    Shopifapi.prototype.queue = function() {
      return _queue.enqueued();
    };

    return Shopifapi;

  })();

  module.exports = Shopifapi;

}).call(this);
